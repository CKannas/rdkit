// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RDKit {

namespace {

const ::google::protobuf::Descriptor* pbAtom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbAtom_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbBond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbBond_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbUIntVect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbUIntVect_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbRingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbRingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbPoint3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbPoint3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbConformer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbConformer_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* pbMol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pbMol_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mol_2eproto() {
  protobuf_AddDesc_Mol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mol.proto");
  GOOGLE_CHECK(file != NULL);
  pbAtom_descriptor_ = file->message_type(0);
  static const int pbAtom_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, atomicnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, aromatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, noimplicit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, chiraltag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, hybridization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, numexpliciths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, explicitvalence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, implicitvalence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, numradicalelectrons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, hasatommapnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, molatommapnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, hasquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, query_),
  };
  pbAtom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbAtom_descriptor_,
      pbAtom::default_instance_,
      pbAtom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbAtom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbAtom));
  pbBond_descriptor_ = file->message_type(1);
  static const int pbBond_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, beginatom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, endatom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, aromatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, conjugated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, stereo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, stereoatom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, hasquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, query_),
  };
  pbBond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbBond_descriptor_,
      pbBond::default_instance_,
      pbBond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbBond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbBond));
  pbUIntVect_descriptor_ = file->message_type(2);
  static const int pbUIntVect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbUIntVect, val_),
  };
  pbUIntVect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbUIntVect_descriptor_,
      pbUIntVect::default_instance_,
      pbUIntVect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbUIntVect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbUIntVect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbUIntVect));
  pbRingInfo_descriptor_ = file->message_type(3);
  static const int pbRingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRingInfo, bondring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRingInfo, atomring_),
  };
  pbRingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbRingInfo_descriptor_,
      pbRingInfo::default_instance_,
      pbRingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbRingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbRingInfo));
  pbPoint3D_descriptor_ = file->message_type(4);
  static const int pbPoint3D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPoint3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPoint3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPoint3D, z_),
  };
  pbPoint3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbPoint3D_descriptor_,
      pbPoint3D::default_instance_,
      pbPoint3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPoint3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbPoint3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbPoint3D));
  pbConformer_descriptor_ = file->message_type(5);
  static const int pbConformer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConformer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConformer, is3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConformer, position_),
  };
  pbConformer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbConformer_descriptor_,
      pbConformer::default_instance_,
      pbConformer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConformer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbConformer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbConformer));
  pbQuery_descriptor_ = file->message_type(6);
  static const int pbQuery_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, negation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, inttol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, intbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, intend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, openbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, openend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, molvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, child_),
  };
  pbQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbQuery_descriptor_,
      pbQuery::default_instance_,
      pbQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbQuery));
  pbMol_descriptor_ = file->message_type(7);
  static const int pbMol_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMol, atom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMol, bond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMol, rings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMol, conformer_),
  };
  pbMol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pbMol_descriptor_,
      pbMol::default_instance_,
      pbMol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pbMol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pbMol));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbAtom_descriptor_, &pbAtom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbBond_descriptor_, &pbBond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbUIntVect_descriptor_, &pbUIntVect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbRingInfo_descriptor_, &pbRingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbPoint3D_descriptor_, &pbPoint3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbConformer_descriptor_, &pbConformer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbQuery_descriptor_, &pbQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pbMol_descriptor_, &pbMol::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mol_2eproto() {
  delete pbAtom::default_instance_;
  delete pbAtom_reflection_;
  delete pbBond::default_instance_;
  delete pbBond_reflection_;
  delete pbUIntVect::default_instance_;
  delete pbUIntVect_reflection_;
  delete pbRingInfo::default_instance_;
  delete pbRingInfo_reflection_;
  delete pbPoint3D::default_instance_;
  delete pbPoint3D_reflection_;
  delete pbConformer::default_instance_;
  delete pbConformer_reflection_;
  delete pbQuery::default_instance_;
  delete pbQuery_reflection_;
  delete pbMol::default_instance_;
  delete pbMol_reflection_;
}

void protobuf_AddDesc_Mol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tMol.proto\022\005RDKit\"\334\002\n\006pbAtom\022\024\n\tatomicN"
    "um\030\001 \001(\r:\0016\022\020\n\010aromatic\030\024 \001(\010\022\022\n\nnoimpli"
    "cit\030\025 \001(\010\022\014\n\004mass\030d \001(\002\022\016\n\006charge\030e \001(\021\022"
    "\021\n\tchiraltag\030f \001(\005\022\030\n\rhybridization\030g \001("
    "\005:\0014\022\025\n\rnumexpliciths\030h \001(\005\022\027\n\017explicitv"
    "alence\030i \001(\005\022\027\n\017implicitvalence\030j \001(\005\022\033\n"
    "\023numradicalelectrons\030k \001(\005\022\030\n\020hasatommap"
    "number\030l \001(\010\022\030\n\020molatommapnumber\030m \001(\005\022\021"
    "\n\010hasquery\030\310\001 \001(\010\022\036\n\005query\030\311\001 \001(\0132\016.RDKi"
    "t.pbQuery\"\307\001\n\006pbBond\022\021\n\tbeginatom\030\001 \002(\r\022"
    "\017\n\007endatom\030\002 \002(\r\022\020\n\010aromatic\030\024 \001(\010\022\022\n\nco"
    "njugated\030\025 \001(\010\022\017\n\004type\030f \001(\r:\0011\022\013\n\003dir\030g"
    " \001(\r\022\016\n\006stereo\030h \001(\r\022\022\n\nstereoatom\030i \003(\r"
    "\022\021\n\010hasquery\030\310\001 \001(\010\022\036\n\005query\030\311\001 \001(\0132\016.RD"
    "Kit.pbQuery\"\031\n\npbUIntVect\022\013\n\003val\030\001 \003(\r\"V"
    "\n\npbRingInfo\022#\n\010bondring\030\001 \003(\0132\021.RDKit.p"
    "bUIntVect\022#\n\010atomring\030\002 \003(\0132\021.RDKit.pbUI"
    "ntVect\",\n\tpbPoint3D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
    "\002\022\t\n\001z\030\003 \001(\002\"K\n\013pbConformer\022\n\n\002id\030\001 \002(\r\022"
    "\014\n\004is3d\030\002 \001(\010\022\"\n\010position\030\003 \003(\0132\020.RDKit."
    "pbPoint3D\"\345\001\n\007pbQuery\022\014\n\004type\030\001 \002(\r\022\023\n\013d"
    "escription\030\002 \002(\t\022\020\n\010negation\030\003 \001(\010\022\020\n\010in"
    "tvalue\030\024 \003(\021\022\016\n\006inttol\030\025 \001(\021\022\020\n\010intbegin"
    "\030\026 \001(\021\022\016\n\006intend\030\027 \001(\021\022\021\n\topenbegin\030\030 \001("
    "\010\022\017\n\007openend\030\031 \001(\010\022\036\n\010molvalue\030\032 \001(\0132\014.R"
    "DKit.pbMol\022\035\n\005child\030\005 \003(\0132\016.RDKit.pbQuer"
    "y\"\212\001\n\005pbMol\022\033\n\004atom\030\001 \003(\0132\r.RDKit.pbAtom"
    "\022\033\n\004bond\030\002 \003(\0132\r.RDKit.pbBond\022 \n\005rings\030d"
    " \001(\0132\021.RDKit.pbRingInfo\022%\n\tconformer\030\017 \003"
    "(\0132\022.RDKit.pbConformer", 1182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mol.proto", &protobuf_RegisterTypes);
  pbAtom::default_instance_ = new pbAtom();
  pbBond::default_instance_ = new pbBond();
  pbUIntVect::default_instance_ = new pbUIntVect();
  pbRingInfo::default_instance_ = new pbRingInfo();
  pbPoint3D::default_instance_ = new pbPoint3D();
  pbConformer::default_instance_ = new pbConformer();
  pbQuery::default_instance_ = new pbQuery();
  pbMol::default_instance_ = new pbMol();
  pbAtom::default_instance_->InitAsDefaultInstance();
  pbBond::default_instance_->InitAsDefaultInstance();
  pbUIntVect::default_instance_->InitAsDefaultInstance();
  pbRingInfo::default_instance_->InitAsDefaultInstance();
  pbPoint3D::default_instance_->InitAsDefaultInstance();
  pbConformer::default_instance_->InitAsDefaultInstance();
  pbQuery::default_instance_->InitAsDefaultInstance();
  pbMol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mol_2eproto {
  StaticDescriptorInitializer_Mol_2eproto() {
    protobuf_AddDesc_Mol_2eproto();
  }
} static_descriptor_initializer_Mol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int pbAtom::kAtomicNumFieldNumber;
const int pbAtom::kAromaticFieldNumber;
const int pbAtom::kNoimplicitFieldNumber;
const int pbAtom::kMassFieldNumber;
const int pbAtom::kChargeFieldNumber;
const int pbAtom::kChiraltagFieldNumber;
const int pbAtom::kHybridizationFieldNumber;
const int pbAtom::kNumexplicithsFieldNumber;
const int pbAtom::kExplicitvalenceFieldNumber;
const int pbAtom::kImplicitvalenceFieldNumber;
const int pbAtom::kNumradicalelectronsFieldNumber;
const int pbAtom::kHasatommapnumberFieldNumber;
const int pbAtom::kMolatommapnumberFieldNumber;
const int pbAtom::kHasqueryFieldNumber;
const int pbAtom::kQueryFieldNumber;
#endif  // !_MSC_VER

pbAtom::pbAtom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbAtom::InitAsDefaultInstance() {
  query_ = const_cast< ::RDKit::pbQuery*>(&::RDKit::pbQuery::default_instance());
}

pbAtom::pbAtom(const pbAtom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbAtom::SharedCtor() {
  _cached_size_ = 0;
  atomicnum_ = 6u;
  aromatic_ = false;
  noimplicit_ = false;
  mass_ = 0;
  charge_ = 0;
  chiraltag_ = 0;
  hybridization_ = 4;
  numexpliciths_ = 0;
  explicitvalence_ = 0;
  implicitvalence_ = 0;
  numradicalelectrons_ = 0;
  hasatommapnumber_ = false;
  molatommapnumber_ = 0;
  hasquery_ = false;
  query_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbAtom::~pbAtom() {
  SharedDtor();
}

void pbAtom::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
  }
}

void pbAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbAtom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbAtom_descriptor_;
}

const pbAtom& pbAtom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbAtom* pbAtom::default_instance_ = NULL;

pbAtom* pbAtom::New() const {
  return new pbAtom;
}

void pbAtom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    atomicnum_ = 6u;
    aromatic_ = false;
    noimplicit_ = false;
    mass_ = 0;
    charge_ = 0;
    chiraltag_ = 0;
    hybridization_ = 4;
    numexpliciths_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    explicitvalence_ = 0;
    implicitvalence_ = 0;
    numradicalelectrons_ = 0;
    hasatommapnumber_ = false;
    molatommapnumber_ = 0;
    hasquery_ = false;
    if (has_query()) {
      if (query_ != NULL) query_->::RDKit::pbQuery::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 atomicNum = 1 [default = 6];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atomicnum_)));
          set_has_atomicnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_aromatic;
        break;
      }
      
      // optional bool aromatic = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aromatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aromatic_)));
          set_has_aromatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_noimplicit;
        break;
      }
      
      // optional bool noimplicit = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noimplicit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &noimplicit_)));
          set_has_noimplicit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(805)) goto parse_mass;
        break;
      }
      
      // optional float mass = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_charge;
        break;
      }
      
      // optional sint32 charge = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_chiraltag;
        break;
      }
      
      // optional int32 chiraltag = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chiraltag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chiraltag_)));
          set_has_chiraltag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_hybridization;
        break;
      }
      
      // optional int32 hybridization = 103 [default = 4];
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hybridization:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hybridization_)));
          set_has_hybridization();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_numexpliciths;
        break;
      }
      
      // optional int32 numexpliciths = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numexpliciths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numexpliciths_)));
          set_has_numexpliciths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_explicitvalence;
        break;
      }
      
      // optional int32 explicitvalence = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_explicitvalence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &explicitvalence_)));
          set_has_explicitvalence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(848)) goto parse_implicitvalence;
        break;
      }
      
      // optional int32 implicitvalence = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_implicitvalence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &implicitvalence_)));
          set_has_implicitvalence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(856)) goto parse_numradicalelectrons;
        break;
      }
      
      // optional int32 numradicalelectrons = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numradicalelectrons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numradicalelectrons_)));
          set_has_numradicalelectrons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(864)) goto parse_hasatommapnumber;
        break;
      }
      
      // optional bool hasatommapnumber = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasatommapnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasatommapnumber_)));
          set_has_hasatommapnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(872)) goto parse_molatommapnumber;
        break;
      }
      
      // optional int32 molatommapnumber = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_molatommapnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &molatommapnumber_)));
          set_has_molatommapnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1600)) goto parse_hasquery;
        break;
      }
      
      // optional bool hasquery = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasquery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasquery_)));
          set_has_hasquery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1610)) goto parse_query;
        break;
      }
      
      // optional .RDKit.pbQuery query = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 atomicNum = 1 [default = 6];
  if (has_atomicnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->atomicnum(), output);
  }
  
  // optional bool aromatic = 20;
  if (has_aromatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->aromatic(), output);
  }
  
  // optional bool noimplicit = 21;
  if (has_noimplicit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->noimplicit(), output);
  }
  
  // optional float mass = 100;
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->mass(), output);
  }
  
  // optional sint32 charge = 101;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(101, this->charge(), output);
  }
  
  // optional int32 chiraltag = 102;
  if (has_chiraltag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->chiraltag(), output);
  }
  
  // optional int32 hybridization = 103 [default = 4];
  if (has_hybridization()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->hybridization(), output);
  }
  
  // optional int32 numexpliciths = 104;
  if (has_numexpliciths()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(104, this->numexpliciths(), output);
  }
  
  // optional int32 explicitvalence = 105;
  if (has_explicitvalence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(105, this->explicitvalence(), output);
  }
  
  // optional int32 implicitvalence = 106;
  if (has_implicitvalence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(106, this->implicitvalence(), output);
  }
  
  // optional int32 numradicalelectrons = 107;
  if (has_numradicalelectrons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(107, this->numradicalelectrons(), output);
  }
  
  // optional bool hasatommapnumber = 108;
  if (has_hasatommapnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(108, this->hasatommapnumber(), output);
  }
  
  // optional int32 molatommapnumber = 109;
  if (has_molatommapnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(109, this->molatommapnumber(), output);
  }
  
  // optional bool hasquery = 200;
  if (has_hasquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(200, this->hasquery(), output);
  }
  
  // optional .RDKit.pbQuery query = 201;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->query(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbAtom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 atomicNum = 1 [default = 6];
  if (has_atomicnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->atomicnum(), target);
  }
  
  // optional bool aromatic = 20;
  if (has_aromatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->aromatic(), target);
  }
  
  // optional bool noimplicit = 21;
  if (has_noimplicit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->noimplicit(), target);
  }
  
  // optional float mass = 100;
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->mass(), target);
  }
  
  // optional sint32 charge = 101;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(101, this->charge(), target);
  }
  
  // optional int32 chiraltag = 102;
  if (has_chiraltag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->chiraltag(), target);
  }
  
  // optional int32 hybridization = 103 [default = 4];
  if (has_hybridization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->hybridization(), target);
  }
  
  // optional int32 numexpliciths = 104;
  if (has_numexpliciths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(104, this->numexpliciths(), target);
  }
  
  // optional int32 explicitvalence = 105;
  if (has_explicitvalence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(105, this->explicitvalence(), target);
  }
  
  // optional int32 implicitvalence = 106;
  if (has_implicitvalence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(106, this->implicitvalence(), target);
  }
  
  // optional int32 numradicalelectrons = 107;
  if (has_numradicalelectrons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(107, this->numradicalelectrons(), target);
  }
  
  // optional bool hasatommapnumber = 108;
  if (has_hasatommapnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(108, this->hasatommapnumber(), target);
  }
  
  // optional int32 molatommapnumber = 109;
  if (has_molatommapnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(109, this->molatommapnumber(), target);
  }
  
  // optional bool hasquery = 200;
  if (has_hasquery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(200, this->hasquery(), target);
  }
  
  // optional .RDKit.pbQuery query = 201;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->query(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbAtom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 atomicNum = 1 [default = 6];
    if (has_atomicnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atomicnum());
    }
    
    // optional bool aromatic = 20;
    if (has_aromatic()) {
      total_size += 2 + 1;
    }
    
    // optional bool noimplicit = 21;
    if (has_noimplicit()) {
      total_size += 2 + 1;
    }
    
    // optional float mass = 100;
    if (has_mass()) {
      total_size += 2 + 4;
    }
    
    // optional sint32 charge = 101;
    if (has_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->charge());
    }
    
    // optional int32 chiraltag = 102;
    if (has_chiraltag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chiraltag());
    }
    
    // optional int32 hybridization = 103 [default = 4];
    if (has_hybridization()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hybridization());
    }
    
    // optional int32 numexpliciths = 104;
    if (has_numexpliciths()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numexpliciths());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 explicitvalence = 105;
    if (has_explicitvalence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->explicitvalence());
    }
    
    // optional int32 implicitvalence = 106;
    if (has_implicitvalence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->implicitvalence());
    }
    
    // optional int32 numradicalelectrons = 107;
    if (has_numradicalelectrons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numradicalelectrons());
    }
    
    // optional bool hasatommapnumber = 108;
    if (has_hasatommapnumber()) {
      total_size += 2 + 1;
    }
    
    // optional int32 molatommapnumber = 109;
    if (has_molatommapnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->molatommapnumber());
    }
    
    // optional bool hasquery = 200;
    if (has_hasquery()) {
      total_size += 2 + 1;
    }
    
    // optional .RDKit.pbQuery query = 201;
    if (has_query()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbAtom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbAtom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbAtom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbAtom::MergeFrom(const pbAtom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atomicnum()) {
      set_atomicnum(from.atomicnum());
    }
    if (from.has_aromatic()) {
      set_aromatic(from.aromatic());
    }
    if (from.has_noimplicit()) {
      set_noimplicit(from.noimplicit());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_chiraltag()) {
      set_chiraltag(from.chiraltag());
    }
    if (from.has_hybridization()) {
      set_hybridization(from.hybridization());
    }
    if (from.has_numexpliciths()) {
      set_numexpliciths(from.numexpliciths());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_explicitvalence()) {
      set_explicitvalence(from.explicitvalence());
    }
    if (from.has_implicitvalence()) {
      set_implicitvalence(from.implicitvalence());
    }
    if (from.has_numradicalelectrons()) {
      set_numradicalelectrons(from.numradicalelectrons());
    }
    if (from.has_hasatommapnumber()) {
      set_hasatommapnumber(from.hasatommapnumber());
    }
    if (from.has_molatommapnumber()) {
      set_molatommapnumber(from.molatommapnumber());
    }
    if (from.has_hasquery()) {
      set_hasquery(from.hasquery());
    }
    if (from.has_query()) {
      mutable_query()->::RDKit::pbQuery::MergeFrom(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbAtom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbAtom::CopyFrom(const pbAtom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbAtom::IsInitialized() const {
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  return true;
}

void pbAtom::Swap(pbAtom* other) {
  if (other != this) {
    std::swap(atomicnum_, other->atomicnum_);
    std::swap(aromatic_, other->aromatic_);
    std::swap(noimplicit_, other->noimplicit_);
    std::swap(mass_, other->mass_);
    std::swap(charge_, other->charge_);
    std::swap(chiraltag_, other->chiraltag_);
    std::swap(hybridization_, other->hybridization_);
    std::swap(numexpliciths_, other->numexpliciths_);
    std::swap(explicitvalence_, other->explicitvalence_);
    std::swap(implicitvalence_, other->implicitvalence_);
    std::swap(numradicalelectrons_, other->numradicalelectrons_);
    std::swap(hasatommapnumber_, other->hasatommapnumber_);
    std::swap(molatommapnumber_, other->molatommapnumber_);
    std::swap(hasquery_, other->hasquery_);
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbAtom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbAtom_descriptor_;
  metadata.reflection = pbAtom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbBond::kBeginatomFieldNumber;
const int pbBond::kEndatomFieldNumber;
const int pbBond::kAromaticFieldNumber;
const int pbBond::kConjugatedFieldNumber;
const int pbBond::kTypeFieldNumber;
const int pbBond::kDirFieldNumber;
const int pbBond::kStereoFieldNumber;
const int pbBond::kStereoatomFieldNumber;
const int pbBond::kHasqueryFieldNumber;
const int pbBond::kQueryFieldNumber;
#endif  // !_MSC_VER

pbBond::pbBond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbBond::InitAsDefaultInstance() {
  query_ = const_cast< ::RDKit::pbQuery*>(&::RDKit::pbQuery::default_instance());
}

pbBond::pbBond(const pbBond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbBond::SharedCtor() {
  _cached_size_ = 0;
  beginatom_ = 0u;
  endatom_ = 0u;
  aromatic_ = false;
  conjugated_ = false;
  type_ = 1u;
  dir_ = 0u;
  stereo_ = 0u;
  hasquery_ = false;
  query_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbBond::~pbBond() {
  SharedDtor();
}

void pbBond::SharedDtor() {
  if (this != default_instance_) {
    delete query_;
  }
}

void pbBond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbBond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbBond_descriptor_;
}

const pbBond& pbBond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbBond* pbBond::default_instance_ = NULL;

pbBond* pbBond::New() const {
  return new pbBond;
}

void pbBond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginatom_ = 0u;
    endatom_ = 0u;
    aromatic_ = false;
    conjugated_ = false;
    type_ = 1u;
    dir_ = 0u;
    stereo_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hasquery_ = false;
    if (has_query()) {
      if (query_ != NULL) query_->::RDKit::pbQuery::Clear();
    }
  }
  stereoatom_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbBond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 beginatom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginatom_)));
          set_has_beginatom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endatom;
        break;
      }
      
      // required uint32 endatom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endatom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endatom_)));
          set_has_endatom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_aromatic;
        break;
      }
      
      // optional bool aromatic = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aromatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aromatic_)));
          set_has_aromatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_conjugated;
        break;
      }
      
      // optional bool conjugated = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conjugated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conjugated_)));
          set_has_conjugated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 102 [default = 1];
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_dir;
        break;
      }
      
      // optional uint32 dir = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(832)) goto parse_stereo;
        break;
      }
      
      // optional uint32 stereo = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stereo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stereo_)));
          set_has_stereo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_stereoatom;
        break;
      }
      
      // repeated uint32 stereoatom = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stereoatom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 840, input, this->mutable_stereoatom())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stereoatom())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_stereoatom;
        if (input->ExpectTag(1600)) goto parse_hasquery;
        break;
      }
      
      // optional bool hasquery = 200;
      case 200: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasquery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasquery_)));
          set_has_hasquery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1610)) goto parse_query;
        break;
      }
      
      // optional .RDKit.pbQuery query = 201;
      case 201: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbBond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 beginatom = 1;
  if (has_beginatom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginatom(), output);
  }
  
  // required uint32 endatom = 2;
  if (has_endatom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endatom(), output);
  }
  
  // optional bool aromatic = 20;
  if (has_aromatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->aromatic(), output);
  }
  
  // optional bool conjugated = 21;
  if (has_conjugated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->conjugated(), output);
  }
  
  // optional uint32 type = 102 [default = 1];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(102, this->type(), output);
  }
  
  // optional uint32 dir = 103;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(103, this->dir(), output);
  }
  
  // optional uint32 stereo = 104;
  if (has_stereo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(104, this->stereo(), output);
  }
  
  // repeated uint32 stereoatom = 105;
  for (int i = 0; i < this->stereoatom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      105, this->stereoatom(i), output);
  }
  
  // optional bool hasquery = 200;
  if (has_hasquery()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(200, this->hasquery(), output);
  }
  
  // optional .RDKit.pbQuery query = 201;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->query(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbBond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 beginatom = 1;
  if (has_beginatom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginatom(), target);
  }
  
  // required uint32 endatom = 2;
  if (has_endatom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endatom(), target);
  }
  
  // optional bool aromatic = 20;
  if (has_aromatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->aromatic(), target);
  }
  
  // optional bool conjugated = 21;
  if (has_conjugated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->conjugated(), target);
  }
  
  // optional uint32 type = 102 [default = 1];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(102, this->type(), target);
  }
  
  // optional uint32 dir = 103;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(103, this->dir(), target);
  }
  
  // optional uint32 stereo = 104;
  if (has_stereo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(104, this->stereo(), target);
  }
  
  // repeated uint32 stereoatom = 105;
  for (int i = 0; i < this->stereoatom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(105, this->stereoatom(i), target);
  }
  
  // optional bool hasquery = 200;
  if (has_hasquery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(200, this->hasquery(), target);
  }
  
  // optional .RDKit.pbQuery query = 201;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->query(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbBond::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 beginatom = 1;
    if (has_beginatom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginatom());
    }
    
    // required uint32 endatom = 2;
    if (has_endatom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endatom());
    }
    
    // optional bool aromatic = 20;
    if (has_aromatic()) {
      total_size += 2 + 1;
    }
    
    // optional bool conjugated = 21;
    if (has_conjugated()) {
      total_size += 2 + 1;
    }
    
    // optional uint32 type = 102 [default = 1];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 dir = 103;
    if (has_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }
    
    // optional uint32 stereo = 104;
    if (has_stereo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stereo());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool hasquery = 200;
    if (has_hasquery()) {
      total_size += 2 + 1;
    }
    
    // optional .RDKit.pbQuery query = 201;
    if (has_query()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }
    
  }
  // repeated uint32 stereoatom = 105;
  {
    int data_size = 0;
    for (int i = 0; i < this->stereoatom_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stereoatom(i));
    }
    total_size += 2 * this->stereoatom_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbBond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbBond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbBond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbBond::MergeFrom(const pbBond& from) {
  GOOGLE_CHECK_NE(&from, this);
  stereoatom_.MergeFrom(from.stereoatom_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginatom()) {
      set_beginatom(from.beginatom());
    }
    if (from.has_endatom()) {
      set_endatom(from.endatom());
    }
    if (from.has_aromatic()) {
      set_aromatic(from.aromatic());
    }
    if (from.has_conjugated()) {
      set_conjugated(from.conjugated());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_stereo()) {
      set_stereo(from.stereo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hasquery()) {
      set_hasquery(from.hasquery());
    }
    if (from.has_query()) {
      mutable_query()->::RDKit::pbQuery::MergeFrom(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbBond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbBond::CopyFrom(const pbBond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbBond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  return true;
}

void pbBond::Swap(pbBond* other) {
  if (other != this) {
    std::swap(beginatom_, other->beginatom_);
    std::swap(endatom_, other->endatom_);
    std::swap(aromatic_, other->aromatic_);
    std::swap(conjugated_, other->conjugated_);
    std::swap(type_, other->type_);
    std::swap(dir_, other->dir_);
    std::swap(stereo_, other->stereo_);
    stereoatom_.Swap(&other->stereoatom_);
    std::swap(hasquery_, other->hasquery_);
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbBond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbBond_descriptor_;
  metadata.reflection = pbBond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbUIntVect::kValFieldNumber;
#endif  // !_MSC_VER

pbUIntVect::pbUIntVect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbUIntVect::InitAsDefaultInstance() {
}

pbUIntVect::pbUIntVect(const pbUIntVect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbUIntVect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbUIntVect::~pbUIntVect() {
  SharedDtor();
}

void pbUIntVect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbUIntVect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbUIntVect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbUIntVect_descriptor_;
}

const pbUIntVect& pbUIntVect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbUIntVect* pbUIntVect::default_instance_ = NULL;

pbUIntVect* pbUIntVect::New() const {
  return new pbUIntVect;
}

void pbUIntVect::Clear() {
  val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbUIntVect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_val;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbUIntVect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 val = 1;
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->val(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbUIntVect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 val = 1;
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->val(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbUIntVect::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 val = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->val(i));
    }
    total_size += 1 * this->val_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbUIntVect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbUIntVect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbUIntVect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbUIntVect::MergeFrom(const pbUIntVect& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbUIntVect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbUIntVect::CopyFrom(const pbUIntVect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbUIntVect::IsInitialized() const {
  
  return true;
}

void pbUIntVect::Swap(pbUIntVect* other) {
  if (other != this) {
    val_.Swap(&other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbUIntVect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbUIntVect_descriptor_;
  metadata.reflection = pbUIntVect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbRingInfo::kBondringFieldNumber;
const int pbRingInfo::kAtomringFieldNumber;
#endif  // !_MSC_VER

pbRingInfo::pbRingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbRingInfo::InitAsDefaultInstance() {
}

pbRingInfo::pbRingInfo(const pbRingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbRingInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbRingInfo::~pbRingInfo() {
  SharedDtor();
}

void pbRingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbRingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbRingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbRingInfo_descriptor_;
}

const pbRingInfo& pbRingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbRingInfo* pbRingInfo::default_instance_ = NULL;

pbRingInfo* pbRingInfo::New() const {
  return new pbRingInfo;
}

void pbRingInfo::Clear() {
  bondring_.Clear();
  atomring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbRingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RDKit.pbUIntVect bondring = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bondring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bondring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bondring;
        if (input->ExpectTag(18)) goto parse_atomring;
        break;
      }
      
      // repeated .RDKit.pbUIntVect atomring = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atomring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atomring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_atomring;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbRingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RDKit.pbUIntVect bondring = 1;
  for (int i = 0; i < this->bondring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bondring(i), output);
  }
  
  // repeated .RDKit.pbUIntVect atomring = 2;
  for (int i = 0; i < this->atomring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atomring(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbRingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RDKit.pbUIntVect bondring = 1;
  for (int i = 0; i < this->bondring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bondring(i), target);
  }
  
  // repeated .RDKit.pbUIntVect atomring = 2;
  for (int i = 0; i < this->atomring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atomring(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbRingInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .RDKit.pbUIntVect bondring = 1;
  total_size += 1 * this->bondring_size();
  for (int i = 0; i < this->bondring_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bondring(i));
  }
  
  // repeated .RDKit.pbUIntVect atomring = 2;
  total_size += 1 * this->atomring_size();
  for (int i = 0; i < this->atomring_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atomring(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbRingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbRingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbRingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbRingInfo::MergeFrom(const pbRingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bondring_.MergeFrom(from.bondring_);
  atomring_.MergeFrom(from.atomring_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbRingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbRingInfo::CopyFrom(const pbRingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbRingInfo::IsInitialized() const {
  
  return true;
}

void pbRingInfo::Swap(pbRingInfo* other) {
  if (other != this) {
    bondring_.Swap(&other->bondring_);
    atomring_.Swap(&other->atomring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbRingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbRingInfo_descriptor_;
  metadata.reflection = pbRingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbPoint3D::kXFieldNumber;
const int pbPoint3D::kYFieldNumber;
const int pbPoint3D::kZFieldNumber;
#endif  // !_MSC_VER

pbPoint3D::pbPoint3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbPoint3D::InitAsDefaultInstance() {
}

pbPoint3D::pbPoint3D(const pbPoint3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbPoint3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbPoint3D::~pbPoint3D() {
  SharedDtor();
}

void pbPoint3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbPoint3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbPoint3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbPoint3D_descriptor_;
}

const pbPoint3D& pbPoint3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbPoint3D* pbPoint3D::default_instance_ = NULL;

pbPoint3D* pbPoint3D::New() const {
  return new pbPoint3D;
}

void pbPoint3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbPoint3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbPoint3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbPoint3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbPoint3D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbPoint3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbPoint3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbPoint3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbPoint3D::MergeFrom(const pbPoint3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbPoint3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbPoint3D::CopyFrom(const pbPoint3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbPoint3D::IsInitialized() const {
  
  return true;
}

void pbPoint3D::Swap(pbPoint3D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbPoint3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbPoint3D_descriptor_;
  metadata.reflection = pbPoint3D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbConformer::kIdFieldNumber;
const int pbConformer::kIs3DFieldNumber;
const int pbConformer::kPositionFieldNumber;
#endif  // !_MSC_VER

pbConformer::pbConformer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbConformer::InitAsDefaultInstance() {
}

pbConformer::pbConformer(const pbConformer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbConformer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is3d_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbConformer::~pbConformer() {
  SharedDtor();
}

void pbConformer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pbConformer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbConformer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbConformer_descriptor_;
}

const pbConformer& pbConformer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbConformer* pbConformer::default_instance_ = NULL;

pbConformer* pbConformer::New() const {
  return new pbConformer;
}

void pbConformer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    is3d_ = false;
  }
  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbConformer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is3d;
        break;
      }
      
      // optional bool is3d = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is3d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is3d_)));
          set_has_is3d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // repeated .RDKit.pbPoint3D position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbConformer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional bool is3d = 2;
  if (has_is3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is3d(), output);
  }
  
  // repeated .RDKit.pbPoint3D position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbConformer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional bool is3d = 2;
  if (has_is3d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is3d(), target);
  }
  
  // repeated .RDKit.pbPoint3D position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbConformer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional bool is3d = 2;
    if (has_is3d()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .RDKit.pbPoint3D position = 3;
  total_size += 1 * this->position_size();
  for (int i = 0; i < this->position_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbConformer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbConformer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbConformer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbConformer::MergeFrom(const pbConformer& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is3d()) {
      set_is3d(from.is3d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbConformer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbConformer::CopyFrom(const pbConformer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbConformer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void pbConformer::Swap(pbConformer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is3d_, other->is3d_);
    position_.Swap(&other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbConformer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbConformer_descriptor_;
  metadata.reflection = pbConformer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbQuery::kTypeFieldNumber;
const int pbQuery::kDescriptionFieldNumber;
const int pbQuery::kNegationFieldNumber;
const int pbQuery::kIntvalueFieldNumber;
const int pbQuery::kInttolFieldNumber;
const int pbQuery::kIntbeginFieldNumber;
const int pbQuery::kIntendFieldNumber;
const int pbQuery::kOpenbeginFieldNumber;
const int pbQuery::kOpenendFieldNumber;
const int pbQuery::kMolvalueFieldNumber;
const int pbQuery::kChildFieldNumber;
#endif  // !_MSC_VER

pbQuery::pbQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbQuery::InitAsDefaultInstance() {
  molvalue_ = const_cast< ::RDKit::pbMol*>(&::RDKit::pbMol::default_instance());
}

pbQuery::pbQuery(const pbQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbQuery::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  negation_ = false;
  inttol_ = 0;
  intbegin_ = 0;
  intend_ = 0;
  openbegin_ = false;
  openend_ = false;
  molvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbQuery::~pbQuery() {
  SharedDtor();
}

void pbQuery::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete molvalue_;
  }
}

void pbQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbQuery_descriptor_;
}

const pbQuery& pbQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbQuery* pbQuery::default_instance_ = NULL;

pbQuery* pbQuery::New() const {
  return new pbQuery;
}

void pbQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    negation_ = false;
    inttol_ = 0;
    intbegin_ = 0;
    intend_ = 0;
    openbegin_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    openend_ = false;
    if (has_molvalue()) {
      if (molvalue_ != NULL) molvalue_->::RDKit::pbMol::Clear();
    }
  }
  intvalue_.Clear();
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // required string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_negation;
        break;
      }
      
      // optional bool negation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_negation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negation_)));
          set_has_negation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child;
        break;
      }
      
      // repeated .RDKit.pbQuery child = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child;
        if (input->ExpectTag(160)) goto parse_intvalue;
        break;
      }
      
      // repeated sint32 intvalue = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 2, 160, input, this->mutable_intvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_intvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_intvalue;
        if (input->ExpectTag(168)) goto parse_inttol;
        break;
      }
      
      // optional sint32 inttol = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inttol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &inttol_)));
          set_has_inttol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_intbegin;
        break;
      }
      
      // optional sint32 intbegin = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intbegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intbegin_)));
          set_has_intbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_intend;
        break;
      }
      
      // optional sint32 intend = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &intend_)));
          set_has_intend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_openbegin;
        break;
      }
      
      // optional bool openbegin = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openbegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openbegin_)));
          set_has_openbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_openend;
        break;
      }
      
      // optional bool openend = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openend_)));
          set_has_openend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_molvalue;
        break;
      }
      
      // optional .RDKit.pbMol molvalue = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_molvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_molvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }
  
  // optional bool negation = 3;
  if (has_negation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->negation(), output);
  }
  
  // repeated .RDKit.pbQuery child = 5;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->child(i), output);
  }
  
  // repeated sint32 intvalue = 20;
  for (int i = 0; i < this->intvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      20, this->intvalue(i), output);
  }
  
  // optional sint32 inttol = 21;
  if (has_inttol()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->inttol(), output);
  }
  
  // optional sint32 intbegin = 22;
  if (has_intbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->intbegin(), output);
  }
  
  // optional sint32 intend = 23;
  if (has_intend()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(23, this->intend(), output);
  }
  
  // optional bool openbegin = 24;
  if (has_openbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->openbegin(), output);
  }
  
  // optional bool openend = 25;
  if (has_openend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->openend(), output);
  }
  
  // optional .RDKit.pbMol molvalue = 26;
  if (has_molvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->molvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }
  
  // optional bool negation = 3;
  if (has_negation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->negation(), target);
  }
  
  // repeated .RDKit.pbQuery child = 5;
  for (int i = 0; i < this->child_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->child(i), target);
  }
  
  // repeated sint32 intvalue = 20;
  for (int i = 0; i < this->intvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(20, this->intvalue(i), target);
  }
  
  // optional sint32 inttol = 21;
  if (has_inttol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->inttol(), target);
  }
  
  // optional sint32 intbegin = 22;
  if (has_intbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->intbegin(), target);
  }
  
  // optional sint32 intend = 23;
  if (has_intend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(23, this->intend(), target);
  }
  
  // optional bool openbegin = 24;
  if (has_openbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->openbegin(), target);
  }
  
  // optional bool openend = 25;
  if (has_openend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->openend(), target);
  }
  
  // optional .RDKit.pbMol molvalue = 26;
  if (has_molvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->molvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional bool negation = 3;
    if (has_negation()) {
      total_size += 1 + 1;
    }
    
    // optional sint32 inttol = 21;
    if (has_inttol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->inttol());
    }
    
    // optional sint32 intbegin = 22;
    if (has_intbegin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intbegin());
    }
    
    // optional sint32 intend = 23;
    if (has_intend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->intend());
    }
    
    // optional bool openbegin = 24;
    if (has_openbegin()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool openend = 25;
    if (has_openend()) {
      total_size += 2 + 1;
    }
    
    // optional .RDKit.pbMol molvalue = 26;
    if (has_molvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->molvalue());
    }
    
  }
  // repeated sint32 intvalue = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->intvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->intvalue(i));
    }
    total_size += 2 * this->intvalue_size() + data_size;
  }
  
  // repeated .RDKit.pbQuery child = 5;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbQuery::MergeFrom(const pbQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  intvalue_.MergeFrom(from.intvalue_);
  child_.MergeFrom(from.child_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_negation()) {
      set_negation(from.negation());
    }
    if (from.has_inttol()) {
      set_inttol(from.inttol());
    }
    if (from.has_intbegin()) {
      set_intbegin(from.intbegin());
    }
    if (from.has_intend()) {
      set_intend(from.intend());
    }
    if (from.has_openbegin()) {
      set_openbegin(from.openbegin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openend()) {
      set_openend(from.openend());
    }
    if (from.has_molvalue()) {
      mutable_molvalue()->::RDKit::pbMol::MergeFrom(from.molvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbQuery::CopyFrom(const pbQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_molvalue()) {
    if (!this->molvalue().IsInitialized()) return false;
  }
  for (int i = 0; i < child_size(); i++) {
    if (!this->child(i).IsInitialized()) return false;
  }
  return true;
}

void pbQuery::Swap(pbQuery* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(description_, other->description_);
    std::swap(negation_, other->negation_);
    intvalue_.Swap(&other->intvalue_);
    std::swap(inttol_, other->inttol_);
    std::swap(intbegin_, other->intbegin_);
    std::swap(intend_, other->intend_);
    std::swap(openbegin_, other->openbegin_);
    std::swap(openend_, other->openend_);
    std::swap(molvalue_, other->molvalue_);
    child_.Swap(&other->child_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbQuery_descriptor_;
  metadata.reflection = pbQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pbMol::kAtomFieldNumber;
const int pbMol::kBondFieldNumber;
const int pbMol::kRingsFieldNumber;
const int pbMol::kConformerFieldNumber;
#endif  // !_MSC_VER

pbMol::pbMol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pbMol::InitAsDefaultInstance() {
  rings_ = const_cast< ::RDKit::pbRingInfo*>(&::RDKit::pbRingInfo::default_instance());
}

pbMol::pbMol(const pbMol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pbMol::SharedCtor() {
  _cached_size_ = 0;
  rings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pbMol::~pbMol() {
  SharedDtor();
}

void pbMol::SharedDtor() {
  if (this != default_instance_) {
    delete rings_;
  }
}

void pbMol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pbMol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pbMol_descriptor_;
}

const pbMol& pbMol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mol_2eproto();  return *default_instance_;
}

pbMol* pbMol::default_instance_ = NULL;

pbMol* pbMol::New() const {
  return new pbMol;
}

void pbMol::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_rings()) {
      if (rings_ != NULL) rings_->::RDKit::pbRingInfo::Clear();
    }
  }
  atom_.Clear();
  bond_.Clear();
  conformer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pbMol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RDKit.pbAtom atom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_atom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_atom;
        if (input->ExpectTag(18)) goto parse_bond;
        break;
      }
      
      // repeated .RDKit.pbBond bond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bond;
        if (input->ExpectTag(122)) goto parse_conformer;
        break;
      }
      
      // repeated .RDKit.pbConformer conformer = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conformer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conformer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_conformer;
        if (input->ExpectTag(802)) goto parse_rings;
        break;
      }
      
      // optional .RDKit.pbRingInfo rings = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pbMol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RDKit.pbAtom atom = 1;
  for (int i = 0; i < this->atom_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atom(i), output);
  }
  
  // repeated .RDKit.pbBond bond = 2;
  for (int i = 0; i < this->bond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bond(i), output);
  }
  
  // repeated .RDKit.pbConformer conformer = 15;
  for (int i = 0; i < this->conformer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->conformer(i), output);
  }
  
  // optional .RDKit.pbRingInfo rings = 100;
  if (has_rings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->rings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pbMol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RDKit.pbAtom atom = 1;
  for (int i = 0; i < this->atom_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atom(i), target);
  }
  
  // repeated .RDKit.pbBond bond = 2;
  for (int i = 0; i < this->bond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bond(i), target);
  }
  
  // repeated .RDKit.pbConformer conformer = 15;
  for (int i = 0; i < this->conformer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->conformer(i), target);
  }
  
  // optional .RDKit.pbRingInfo rings = 100;
  if (has_rings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->rings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pbMol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .RDKit.pbRingInfo rings = 100;
    if (has_rings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rings());
    }
    
  }
  // repeated .RDKit.pbAtom atom = 1;
  total_size += 1 * this->atom_size();
  for (int i = 0; i < this->atom_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atom(i));
  }
  
  // repeated .RDKit.pbBond bond = 2;
  total_size += 1 * this->bond_size();
  for (int i = 0; i < this->bond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bond(i));
  }
  
  // repeated .RDKit.pbConformer conformer = 15;
  total_size += 1 * this->conformer_size();
  for (int i = 0; i < this->conformer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conformer(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pbMol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pbMol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pbMol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pbMol::MergeFrom(const pbMol& from) {
  GOOGLE_CHECK_NE(&from, this);
  atom_.MergeFrom(from.atom_);
  bond_.MergeFrom(from.bond_);
  conformer_.MergeFrom(from.conformer_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_rings()) {
      mutable_rings()->::RDKit::pbRingInfo::MergeFrom(from.rings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pbMol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pbMol::CopyFrom(const pbMol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pbMol::IsInitialized() const {
  
  for (int i = 0; i < atom_size(); i++) {
    if (!this->atom(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bond_size(); i++) {
    if (!this->bond(i).IsInitialized()) return false;
  }
  for (int i = 0; i < conformer_size(); i++) {
    if (!this->conformer(i).IsInitialized()) return false;
  }
  return true;
}

void pbMol::Swap(pbMol* other) {
  if (other != this) {
    atom_.Swap(&other->atom_);
    bond_.Swap(&other->bond_);
    std::swap(rings_, other->rings_);
    conformer_.Swap(&other->conformer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pbMol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pbMol_descriptor_;
  metadata.reflection = pbMol_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RDKit

// @@protoc_insertion_point(global_scope)
